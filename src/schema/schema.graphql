type User {
  uid: ID
  name: String!
  email: String!
  phone: String!
}

type AuthPayload {
  user: User!
  token: String!
}

type Address {
  city: String!
  country: String!
  street: String!
  zip: String!
}

type OrderPayload {
  uid: ID
  title: String
  bookingDate: Float
  address: Address
  customer: User
}

type Orders {
  orders: [OrderPayload!]
  count: Int!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String!
  phone: String!
}

input SigninUserInput {
  email: String!
  password: String!
}

input AddressInput {
  city: String!
  country: String!
  street: String!
  zip: String!
}

input CreateOrderInput {
  title: String!
  address: AddressInput
}
input OrderInput {
  uid: ID!
}

input OrderLimitInput {
  page: Int
  limit: Int
}

type Query {
  orders(data: OrderLimitInput): Orders!
  order(data: OrderInput!): OrderPayload!
}

type Mutation {
  register(data: CreateUserInput!): AuthPayload!
  login(data: SigninUserInput!): AuthPayload!
  createOrder(data: CreateOrderInput!): OrderPayload!
  deleteOrder(data: OrderInput!): OrderPayload!
}
